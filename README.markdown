# **JPA / HIBERNATE INTRODU√á√ÉO**

## **ORM** (Object Relational Mapping)

Mapeamento objeto-relacional ou ORM √© a t√©cnica de programa√ß√£o para
mapear objetos do modelo de dom√≠nio do aplicativo (class Java) para as
tabelas do banco de dados relacional. O conceito fundamental por tr√°s do
ORM √© como os objetos se relacionam entre si e como se representa essas
rela√ß√µes como entidades em bancos de dados.

De forma resumida, ele atua como uma ponte/intermediador, que fornece uma camada que relaciona os
dados de um modelo baseado em objeto com entidades ou tabelas em um
banco de dados relacional encapsulando a cria√ß√£o e execu√ß√£o dos comandos
SQL's, sem a necessidade de se construir cada query manualmente em
determinados casos, pois o ORM permite a intera√ß√£o entre objetos e o
banco de dados de uma forma mais natural, semelhante a como far√≠amos em
qualquer linguagem de programa√ß√£o orientado a objetos.

Exemplos de ORM's: Hibernate (Java), Entity Framework (.NET), Django
(Python), Prisma (TypeScript/JavaScript)

![Object Relational Mapping](asserts/media/image1.png)

## **JPA (**Jakarta Persistence API**)**

O Jakarta Persistence API (JPA) √© uma especifica√ß√£o do Java que define
como as aplica√ß√µes em Java podem obter persist√™ncia e mapeamento
objeto/relacional (ORM) de dados em base de dados relacionais.
Para isso, conta com o aux√≠lio de anota√ß√µes para simplificar todo o processo.
No entanto, o JPA em si √© apenas uma especifica√ß√£o e precisa de uma
implementa√ß√£o ORM para ser utilizada. No caso do Java, uma das
implementa√ß√µes mais comuns √© o Hibernate.

**Exemplos de implementa√ß√µes JPA + Java**: Hibernate, EclipseLink, Apache OpenJPA

## **HIBERNATE**

O Hibernate √© uma implementa√ß√£o ORM que deve cumprir com todos os
requisitos estabelecidos pela especifica√ß√£o JPA. Por ter essa
caracter√≠stica de ORM, ele lida com todo o mapeamento objeto/relacional
e n√£o precisamos escrever SQL nativas (mas podemos), j√° que utilizamos
as anota√ß√µes/especifica√ß√µes JPA em nosso pr√≥prio c√≥digo. A linguagem
utilizada pelo Hibernate √© chamada de HQL (Hibernate Query Language).

## **JDBC (**Java Database Connectivity**)**

JDBC √© uma API que faz parte do Java Standard Edition e sua fun√ß√£o
principal √© permitir a conex√£o a sistemas de banco de dados e execu√ß√£o
de consultas atrav√©s da linguagem SQL. Na pr√°tica, √© uma camada
intermedi√°ria entre a aplica√ß√£o e o banco de dados. JDBC √© essencial
para interagir com bases de dados em aplica√ß√µes Java, pois disponibiliza
uma interface padr√£o para se comunicar com sistemas de gerenciamento de
bancos de dados, facilitando a cria√ß√£o de aplica√ß√µes que necessitam de
acesso a dados armazenados em bases de dados relacionais.

![](asserts/media/image2.png)
A arquitetura b√°sica do JDBC √© composta por duas camadas espec√≠ficas:

**API JDBC**: √© formada por um conjunto de classes e interfaces dispon√≠veis nos pacotes `java.sql` e `javax.sql`, e √©
respons√°vel pela comunica√ß√£o entre a aplica√ß√£o e o driver JDBC.

**API JDBC Driver**: √© um software que implementa os m√©todos necess√°rios para realizar a comunica√ß√£o com o banco de
dados.

Existem quatro tipos de drivers JDBC. S√£o eles:

- **Driver de ponte JDBC-ODBC**: utiliza um driver ODBC para se conectar ao banco de dados.
- **Driver de API nativa**: usa bibliotecas do lado do cliente para se comunicar com o banco de dados.
- **Driver de protocolo de rede**: adota uma camada adicional de software para converter as chamadas JDBC no protocolo
  utilizado pelo banco de dados.
- **Driver fino ou Thin Driver**: converte as chamadas JDBC de acordo com o banco de dados do fabricante.

![](asserts/media/image3.png)

## **SQL (**Structured Query Language**)**

A Linguagem de consulta estruturada (SQL) √© uma linguagem de programa√ß√£o
para armazenar e processar informa√ß√µes em um banco de dados relacional.
Um banco de dados relacional armazena informa√ß√µes em formato tabular,
com linhas e colunas representando diferentes atributos de dados e as
v√°rias rela√ß√µes entre os valores dos dados. Voc√™ pode usar instru√ß√µes
SQL para armazenar, atualizar, remover, pesquisar e recuperar
informa√ß√µes do banco de dados. Tamb√©m pode usar SQL para manter e
otimizar a performance do banco de dados.

## **DBMS (**Database Management System**) \| SGBD** (Sistema de
Gerenciamento de Banco de Dados)

Um Database Management System (DBMS), ou Sistema de Gerenciamento de
Banco de Dados (SGBD), √© um software que permite aos usu√°rios criar,
manipular e gerenciar bancos de dados. Ele fornece uma interface entre
os usu√°rios e os dados armazenados, permitindo que eles acessem,
atualizem e recuperem informa√ß√µes de forma eficiente.

## Exemplos de SGBDs/DBMSs Populares:

- **Relacionais**:
    - **MySQL** üê¨: Um SGBD relacional de c√≥digo aberto amplamente utilizado.
    - **PostgreSQL** üêò: Um SGBD relacional avan√ßado e de c√≥digo aberto.
    - **Oracle Database** üèõÔ∏è: Um SGBD comercial altamente robusto e escal√°vel.
    - **Microsoft SQL Server** üñ•Ô∏è: Um SGBD relacional desenvolvido pela Microsoft.

- **N√£o-Relacionais (NoSQL)**:
    - **MongoDB** üçÉ: Um banco de dados NoSQL orientado a documentos.
    - **Cassandra** üü™: Um banco de dados NoSQL distribu√≠do e escal√°vel.
    - **Redis** üîë: Um banco de dados NoSQL de chave-valor de alto desempenho.

O pgAdmin, mysql workbeanch, dbbeaver, entre outros: s√£o ferramentas
gr√°ficas de gerenciamento de banco de dados. (DBMS GUI).

![](asserts/media/image4.png)

JPA

![](asserts/media/image5.png)

## **CONTEXTO DE PERSIST√äNCIA**
O Contexto de Persist√™ncia √© o local
onde um conjunto de instaÃÇncias das entidades (**\@Entity**) ser√°
gerenciado. Em uma aplica√ß√£o pode haver diversos contextos, sendo que
cada contexto √© gerenciado por um **_EntityManager._**
O EntityManager monitora todas as alteracÃßoÃÉes realizadas nos objetos
gerenciados. Entretanto, quando um contexto eÃÅ fechado, todas as
instaÃÇncias das entidades passam a naÃÉo mais serem gerenciadas
(desacopladas) e qualquer alteracÃßaÃÉo realizada nesta entidade naÃÉo eÃÅ
refletida no banco.

![](asserts/media/image6.png)

Ciclo de vida.

![](asserts/media/image7.png)

O contexto de persist√™ncia pode possuir dois tipos de escopos: transa√ß√£o e estendido. O escopo vai definir o ciclo de
vida de cada entidade.

### Escopo de Transa√ß√£o

- **Ciclo de Vida das Entidades**: Dura apenas o tempo de uma transa√ß√£o.
- **Ap√≥s a Transa√ß√£o**: As inst√¢ncias gerenciadas pelo contexto de persist√™ncia s√£o destru√≠das.
- **Uso**: Comum em contextos gerenciados por servidores de aplica√ß√£o.
- **Exemplo Geral**: Ao fazer uma opera√ß√£o de banco de dados, as entidades s√£o criadas e manipuladas dentro da
  transa√ß√£o. Quando a transa√ß√£o termina (commit ou rollback), essas entidades deixam de existir no contexto de
  persist√™ncia.
- **Exemplos Reais**:
    - **Opera√ß√µes Banc√°rias**: Um sistema banc√°rio processando uma transfer√™ncia de dinheiro. A transfer√™ncia envolve
      verificar o saldo, debitar uma conta e creditar outra, tudo dentro de uma √∫nica transa√ß√£o. Ap√≥s a transa√ß√£o, as
      entidades usadas para essa opera√ß√£o s√£o descartadas.
    - **E-commerce: Processamento de Pedido**: Um cliente realiza uma compra. O sistema verifica a disponibilidade dos
      produtos, debita o pagamento e atualiza o estoque, tudo dentro de uma √∫nica transa√ß√£o. Isso garante a consist√™ncia
      dos dados durante a opera√ß√£o de checkout.

### Escopo Estendido

- **Ciclo de Vida das Entidades**: Dura al√©m de uma transa√ß√£o, persistindo mesmo ap√≥s a transa√ß√£o.
- **Ap√≥s a Transa√ß√£o**: As inst√¢ncias continuam sendo gerenciadas pelo contexto de persist√™ncia.
- **Uso**: Utilizado em ambientes JSE e em ambientes JEE, sendo gerenciado por componentes com escopo de sess√£o.
- **Exemplo Geral**: Ideal para cen√°rios onde a mesma inst√¢ncia de entidade precisa ser usada em m√∫ltiplas transa√ß√µes,
  como em aplica√ß√µes de longo prazo ou processos de conversa√ß√£o.
- **Exemplos Reais**:
    - **Aplica√ß√µes de Longo Prazo**: Sistema de gerenciamento de projetos onde um usu√°rio trabalha em um projeto por
      v√°rios dias. As mudan√ßas feitas no projeto s√£o salvas periodicamente, mas o projeto em si √© mantido no contexto de
      persist√™ncia durante toda a sess√£o do usu√°rio.
    - **Processos de Conversa√ß√£o (Wizard)**: Formul√°rio de inscri√ß√£o dividido em v√°rias etapas (wizard). Um usu√°rio
      preenche v√°rias se√ß√µes do formul√°rio em diferentes momentos. As informa√ß√µes preenchidas em cada etapa s√£o mantidas
      no contexto de persist√™ncia at√© que o formul√°rio completo seja submetido.
    - **Aplica√ß√µes de Edi√ß√£o de Dados**: Sistema de edi√ß√£o de documentos colaborativos. V√°rios usu√°rios podem editar um
      documento ao longo do tempo. As mudan√ßas de cada usu√°rio s√£o persistidas, mas o documento continua a ser
      gerenciado pelo contexto de persist√™ncia.

### Exemplo de Implementa√ß√£o

```java
//JEE
@PersistenceContext(unitName = "exemploPU", type = PersistenceContextType.EXTENDED)
private EntityManager entityManager;

//Spring boot
@PersistenceContext(type = PersistenceContextType.EXTENDED)
private EntityManager entityManager;
```

**Explica√ß√£o:** Este c√≥digo configura um EntityManager com um escopo de
persist√™ncia estendido, indicando que as entidades gerenciadas por este
EntityManager continuar√£o a ser gerenciadas mesmo ap√≥s o fim de uma
transa√ß√£o.

### Resumindo

- **Escopo de Transa√ß√£o**: Ciclo de vida limitado √† transa√ß√£o.

- **Escopo Estendido**: Ciclo de vida al√©m da transa√ß√£o, adequado para uso prolongado

## EntityManager

O EntityManager √© um servi√ßo respons√°vel por gerenciar as entidades.

![](asserts/media/image8.png)

## Estados de uma Entidade em JPA/Hibernate

Uma entidade (@Entity) pode estar em um destes quatro estados:

1. **NEW**: Quando temos uma nova inst√¢ncia da entidade que n√£o est√° associada ao contexto de persist√™ncia. Esse √© o
   estado inicial de uma entidade rec√©m-criada, antes de ser persistida pela primeira vez.

2. **MANAGED**: √â uma inst√¢ncia persistente que est√° atualmente associada ao contexto de persist√™ncia. O EntityManager
   est√° gerenciando essa entidade, o que significa que qualquer altera√ß√£o feita √† entidade ser√° automaticamente
   sincronizada com o banco de dados quando a transa√ß√£o for confirmada.

3. **REMOVED**: √â uma inst√¢ncia associada ao contexto de persist√™ncia que ser√° removida do banco de dados quando a
   transa√ß√£o for confirmada. Isso acontece quando o m√©todo `remove()` do EntityManager √© chamado.

4. **DETACHED**: √â uma inst√¢ncia que estava no contexto de persist√™ncia, mas n√£o est√° mais associada ao mesmo. Isso pode
   ocorrer quando a sess√£o √© fechada, a transa√ß√£o √© conclu√≠da, ou quando explicitamente desanexada usando o m√©todo
   `detach()` do EntityManager. Uma entidade nesse estado n√£o √© monitorada pelo EntityManager, portanto, mudan√ßas feitas
   √† entidade n√£o ser√£o sincronizadas com o banco de dados.

O EntityManager √© uma interface da JPA que define os m√©todos para gerenciar as entidades.

#### Principais Opera√ß√µes

- **persist()**: Faz a transi√ß√£o do estado NEW para MANAGED. A entidade √© salva no banco de dados.
- **merge()**: Faz a transi√ß√£o do estado DETACHED para MANAGED. A entidade √© sincronizada com o banco de dados.
- **remove()**: Faz a transi√ß√£o do estado MANAGED para REMOVED. A entidade √© removida do banco de dados.
- **find()**: Busca uma entidade pelo seu identificador. Se encontrada, a entidade ser√° colocada no estado MANAGED.
- **createQuery()**: Cria uma query para ser executada no banco de dados.

#### Ciclo de Vida da Entidade

1. Inst√¢ncia da entidade √© criada (NEW).
2. A entidade √© persistida pelo EntityManager (MANAGED).
3. A transa√ß√£o √© confirmada e a entidade √© sincronizada com o banco de dados.
4. A entidade pode ser removida (REMOVED) ou destacada (DETACHED).

![](asserts/media/image9.png)

### Exemplos de Uso

- **NEW**:

  ```java
  EntityManager em = entityManagerFactory.createEntityManager();

  em.getTransaction().begin();

  MyEntity entity = new MyEntity(); // Estado NEW

  em.persist(entity); // Estado passa a ser MANAGED

  em.getTransaction().commit();

  em.close();
  ```

- **MANAGED**:

  ```java


  EntityManager em = entityManagerFactory.createEntityManager();

  em.getTransaction().begin();

  MyEntity entity = em.find(MyEntity.class, entityId); // Estado
  MANAGED

  entity.setSomeProperty(\"newValue\");

  em.getTransaction().commit(); // As mudan√ßas s√£o sincronizadas com o
  banco de dados

  em.close();
  ```

- **REMOVED**:

  ```java


  EntityManager em = entityManagerFactory.createEntityManager();

  em.getTransaction().begin();

  MyEntity entity = em.find(MyEntity.class, entityId); // Estado
  MANAGED

  em.remove(entity); // Estado REMOVED

  em.getTransaction().commit(); // A entidade √© removida do banco de
  dados

  em.close();
  ```

- **DETACHED**:

  ```java

  Copiar c√≥digo

  EntityManager em = entityManagerFactory.createEntityManager();

  em.getTransaction().begin();

  MyEntity entity = em.find(MyEntity.class, entityId); // Estado
  MANAGED

  em.detach(entity); // Estado DETACHED

  entity.setSomeProperty(\"newValue\");

  em.getTransaction().commit(); // Mudan√ßa n√£o sincronizada com o
  banco de dados

  em.close();
  ```

### Complementos

- **Flushing**: O estado MANAGED garante que qualquer modifica√ß√£o
  feita √† entidade ser√° sincronizada com o banco de dados durante o
  processo de flush. O flush pode ser manual (usando em.flush()) ou
  autom√°tico ao final de uma transa√ß√£o.

- **Merge**: Uma entidade no estado DETACHED pode ser mesclada de
  volta ao contexto de persist√™ncia usando o m√©todo merge(). Isso
  cria uma c√≥pia da entidade no estado MANAGED.

  ```java

  MyEntity detachedEntity = \...;

  EntityManager em = entityManagerFactory.createEntityManager();

  em.getTransaction().begin();

  MyEntity managedEntity = em.merge(detachedEntity); // Estado MANAGED

  em.getTransaction().commit();

  em.close();

  ```

- **Cascade Types**: Para entidades relacionadas, √© importante
  entender os tipos de cascata (Cascading) que podem ser aplicados
  nas associa√ß√µes, como CascadeType.PERSIST, CascadeType.MERGE,
  CascadeType.REMOVE, CascadeType.DETACH, entre outros. Isso define
  como as opera√ß√µes de persist√™ncia devem ser propagadas para
  entidades associadas.

Refer√™ncias:

<https://coodesh.com/blog/dicionario/o-que-e-hibernate/>

<https://www.dio.me/articles/entenda-a-diferenca-entre-jdbc-jpa-hibernate-e-o-spring-data-jpa>

<https://rockcontent.com/br/blog/jdbc/>

<https://aws.amazon.com/pt/what-is/sql/>

<https://w2websites.com/glossario/o-que-e-database-management-system-dbms/>

<https://www.youtube.com/watch?v=xGnzDzcXSnA&list=PLlYjHWCxjWmBptKGdbbRfIhj0XJttbs6B>

<https://ricardojob.gitbooks.io/dac/content/contexto.html>

---

# Projeto de Estudo 2: Hibernate com OpenBootcamp

Este projeto foi desenvolvido como parte do curso de **Hibernate** ministrado pelo canal **OpenBootcamp** no YouTube. A
trilha do curso abordou diversos conceitos fundamentais e avan√ßados do **Hibernate** e sua integra√ß√£o com o **Spring
Boot**, al√©m de t√©cnicas para otimiza√ß√£o e manipula√ß√£o de dados em aplica√ß√µes Java. Confira a playlist completa do
curso [neste link](https://www.youtube.com/playlist?list=PLkVpKYNT_U9eTicIIaqR9YUoIZ5V4ZXpS).

## üìö T√≥picos Estudados

### 1. Introdu√ß√£o ao Hibernate

- Vis√£o geral sobre o que √© o **Hibernate** e como ele facilita o **mapeamento objeto-relacional** (ORM).
- Configura√ß√£o b√°sica de um projeto com **Hibernate** e integra√ß√£o com **Spring Boot**.

### 2. Cria√ß√£o de Modelos e Entidades

- Como definir **entidades** em Hibernate, mapeando classes Java para tabelas de um banco de dados.
- **Anota√ß√µes** como `@Entity`, `@Table`, `@Id` e `@GeneratedValue` para mapeamento.

### 3. Associa√ß√µes e Relacionamentos

- **Relacionamentos entre entidades**:
    - **OneToOne** (`@OneToOne`)
    - **OneToMany** (`@OneToMany`)
    - **ManyToOne** (`@ManyToOne`)
    - **ManyToMany** (`@ManyToMany`)
- Estudo de **cascading**, **fetch types** e como gerenciar esses relacionamentos no banco de dados.

### 4. Cole√ß√µes em Hibernate

- Uso de cole√ß√µes (`List`, `Set`, etc.) em entidades e como o **Hibernate** gerencia essas cole√ß√µes de forma eficiente.

### 5. Consultas com HQL e Criteria API

- Utiliza√ß√£o de **Hibernate Query Language (HQL)** para criar consultas mais flex√≠veis em bancos de dados.
- Introdu√ß√£o √† **Criteria API** para a constru√ß√£o din√¢mica de consultas.

### 6. Eventos no Ciclo de Vida das Entidades

- Como usar **eventos de ciclo de vida** no Hibernate, como:
    - `@PrePersist`
    - `@PreUpdate`
    - `@PreRemove`

### 7. Auditoria de Dados com Envers

- Implementa√ß√£o de auditoria de dados utilizando **Hibernate Envers**.
- Rastreabilidade das altera√ß√µes feitas em entidades ao longo do tempo.

### 8. Pagina√ß√£o e Gerenciamento de Erros

- Implementa√ß√£o de **pagina√ß√£o** em consultas para melhorar a performance e experi√™ncia de usu√°rio.
- Tratamento de **transa√ß√µes** e **erros** na aplica√ß√£o utilizando o **Spring Boot**.

### 9. Armazenamento de Dados em JSON

- Como armazenar e recuperar dados em formato **JSON** em entidades utilizando o Hibernate e o PostgreSQL.

### 10. Inser√ß√µes em Lote (Batch Insert)

- Otimiza√ß√£o de inser√ß√µes em massa no banco de dados, utilizando o suporte do Hibernate para **batch processing**.

### 11. Integra√ß√£o com PostgreSQL

- Configura√ß√£o do **PostgreSQL** como banco de dados para persist√™ncia de dados.
- Uso de **replica√ß√£o de bancos de dados** e **cria√ß√£o de clusters** para aumentar a escalabilidade da aplica√ß√£o.

### 12. Backups e Seguran√ßa no PostgreSQL

- Como realizar **backups** e restaurar bancos de dados em ambientes PostgreSQL.
- Gerenciamento de **n√≠veis de seguran√ßa** e permiss√µes no PostgreSQL.

### 13. Otimiza√ß√£o de Consultas e Aplica√ß√µes

- T√©cnicas de **otimiza√ß√£o** de consultas e manipula√ß√£o de dados utilizando √≠ndices e boas pr√°ticas de banco de dados.

